/*
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * This file is part of the Contiki operating system.
 *
 */

#include "contiki.h"
#include "contiki-lib.h"
#include "contiki-net.h"

#include <string.h>
#include "sys/node-id.h"

#include "dev/light-sensor.h"
#include "dev/temp-sensor.h"
#include "dev/gas-sensor.h"
#include "dev/humidity-sensor.h"
#include "dev/beep.h"

#include "leds.h"

#define DEBUG DEBUG_PRINT
#include "net/uip-debug.h"

#define UIP_IP_BUF   ((struct uip_ip_hdr *)&uip_buf[UIP_LLH_LEN])

#define MAX_PAYLOAD_LEN 120

static struct uip_udp_conn *server_conn;

PROCESS(udp_server_process, "UDP server process");
PROCESS(sense_process, "sense");
AUTOSTART_PROCESSES(&sense_process,&resolv_process,&udp_server_process);
/*---------------------------------------------------------------------------*/

static int temperature; 
static int gas;
static int humidity;
static int light;
static int count;
static int change;
static int sumT;
static int sumH;
static int sumG;
static int sumL;
static int parsed_val[4]; //Temp, hum, light gas
static int
get_light(void)
{
  change = change+light_sensor.value(change)%1000;
  return light_sensor.value(change);
}

static int
get_temp(void)
{

  change = change+temp_sensor.value(change)%1000;
  return temp_sensor.value(change);
}

static int
get_humidity(void)
{

  change = change+humidity_sensor.value(change)%1000;
  return humidity_sensor.value(change);
}

static int
get_gas(void)
{

  change = change+gas_sensor.value(change)%1000;
  return gas_sensor.value(change);
}

static void performActuation(){
 int avgT = sumT/(count+1);
 int avgH = sumH/(count+1);
 int avgL = sumL/(count+1);
 int avgG = sumG/(count+1);
 printf("Signals after wait time: T %d H %d L %d G %d\n", avgT, avgH, avgL,avgG);
   if(avgT >= 32 && avgH >= 40){
      beep_on();
   }
   else{
       beep_off();
    } 
   leds_off(LEDS_ALL);
   //for some reason the colors dont coresspond correctly, in my case g->b r->g y->red so i used numbers
   if(avgG <= 400){
      leds_on(0);
      printf("safe!\n");
    }
   else if(avgG > 400 && avgG <= 1000 ){
       printf("warning!\n");
       leds_on(1);
    }
   else{
    leds_on(2);
    printf("DANGER!\n");
    }
   if(avgL >= 0.6*4500){
      printf("LIGHT LED: ON\n");
    }
   else{
	 printf("LIGHT LED: OFF\n"); 
	}
}


static void
extract(const char* buffer, int *values){
   int value =0;
   int index = 0;
   int check_read =0;
   while(*buffer!='\0'){
      if(*buffer >='0' && *buffer <='9'){ //checks if integer
         value = value*10 + *buffer - '0'; //converts to integer
         check_read = 1;
      }
      else{ //at this point we are at a non int (space in my case)
         if(check_read){
            values[index++] = value;
            value = 0;
            check_read =0;
         }
      } 
      buffer++; //next char
   }
   if(check_read){
    values[index++] = value; // we go until /0 so if theres a value we need to store
   }
}

tcpip_handler(void)
{
  static int seq_id;
  char buf[MAX_PAYLOAD_LEN];

  if(uip_newdata()) {
    ((char *)uip_appdata)[uip_datalen()] = 0;
    extract((char *)uip_appdata, parsed_val);
    PRINTF("Server received values: %d,%d,%d,%d from ",parsed_val[0], parsed_val[1], parsed_val[2], parsed_val[3]);
    count+=1;
    sumT += parsed_val[0];
    sumH += parsed_val[1];
    sumL += parsed_val[2];
    sumG += parsed_val[3];
    PRINT6ADDR(&UIP_IP_BUF->srcipaddr);
    PRINTF("\n");

    uip_ipaddr_copy(&server_conn->ripaddr, &UIP_IP_BUF->srcipaddr);
    printf("Server sensors: T %d H %d L %d G %d\n", temperature, humidity, light, gas);
    PRINTF("Responding with message: ");
    sprintf(buf, "avgtemperature %d avghumidity %d avglight %d avggas %d", sumT/(count+1), sumH/(count+1),sumL/(count+1),sumG/(count+1));
    PRINTF("%s\n", buf);
    performActuation();
    uip_udp_packet_send(server_conn, buf, strlen(buf));
    /* Restore server connection to allow data from any node */
    memset(&server_conn->ripaddr, 0, sizeof(server_conn->ripaddr));
  }
}
/*---------------------------------------------------------------------------*/
static void
print_local_addresses(void)
{
  int i;
  uint8_t state;

  PRINTF("Server IPv6 addresses: ");
  for(i = 0; i < UIP_DS6_ADDR_NB; i++) {
    state = uip_ds6_if.addr_list[i].state;
    if(uip_ds6_if.addr_list[i].isused &&
       (state == ADDR_TENTATIVE || state == ADDR_PREFERRED)) {
      PRINT6ADDR(&uip_ds6_if.addr_list[i].ipaddr);
      PRINTF("\n");
    }
  }
}
/*---------------------------------------------------------------------------*/
PROCESS_THREAD(udp_server_process, ev, data)
{
#if UIP_CONF_ROUTER
  uip_ipaddr_t ipaddr;
#endif /* UIP_CONF_ROUTER */

  PROCESS_BEGIN();
  PRINTF("UDP server started\n");

#if RESOLV_CONF_SUPPORTS_MDNS
  resolv_set_hostname("contiki-udp-server");
#endif

#if UIP_CONF_ROUTER
  uip_ip6addr(&ipaddr, 0xaaaa, 0, 0, 0, 0, 0, 0, 0);
  uip_ds6_set_addr_iid(&ipaddr, &uip_lladdr);
  uip_ds6_addr_add(&ipaddr, 0, ADDR_AUTOCONF);
#endif /* UIP_CONF_ROUTER */

  print_local_addresses();

  server_conn = udp_new(NULL, UIP_HTONS(3001), NULL);
  udp_bind(server_conn, UIP_HTONS(3000));
  static struct etimer receivetimer;
  etimer_set(&receivetimer, CLOCK_SECOND * 500);	
  while(1) {
    PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&receivetimer));
    etimer_reset(&receivetimer);
    PROCESS_YIELD();
    sumT = temperature;
    sumH = humidity;
    sumL = light;
    sumG = gas;
    count = 0;
    if(ev == tcpip_event) {
      tcpip_handler();
    }
  }

  PROCESS_END();
}



PROCESS_THREAD(sense_process, ev, data)
{
  static struct etimer timer;
  PROCESS_BEGIN();

  etimer_set(&timer, CLOCK_SECOND * 1000);
  SENSORS_ACTIVATE(light_sensor);
  SENSORS_ACTIVATE(temp_sensor);
  SENSORS_ACTIVATE(gas_sensor);
  SENSORS_ACTIVATE(humidity_sensor);

  while(1) {
    PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&timer));
    etimer_reset(&timer);
    light = get_light();
    temperature = get_temp();
    gas = get_gas();
    humidity = get_humidity();
  }

  PROCESS_END();
}


/*---------------------------------------------------------------------------*/
